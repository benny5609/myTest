// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "login.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LoginServer {

namespace {

const ::google::protobuf::Descriptor* cmsg_CreateAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_CreateAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_LoginAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_LoginAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_login_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_login_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_loginRequest_reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_loginRequest_reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* cmsg_ChangePassword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cmsg_ChangePassword_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* smsg_Auth_Success_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  smsg_Auth_Success_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* smsg_code_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_login_2eproto() {
  protobuf_AddDesc_login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "login.proto");
  GOOGLE_CHECK(file != NULL);
  cmsg_CreateAccount_descriptor_ = file->message_type(0);
  static const int cmsg_CreateAccount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_CreateAccount, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_CreateAccount, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_CreateAccount, username_),
  };
  cmsg_CreateAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_CreateAccount_descriptor_,
      cmsg_CreateAccount::default_instance_,
      cmsg_CreateAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_CreateAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_CreateAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_CreateAccount));
  cmsg_LoginAccount_descriptor_ = file->message_type(1);
  static const int cmsg_LoginAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_LoginAccount, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_LoginAccount, password_),
  };
  cmsg_LoginAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_LoginAccount_descriptor_,
      cmsg_LoginAccount::default_instance_,
      cmsg_LoginAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_LoginAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_LoginAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_LoginAccount));
  cmsg_login_request_descriptor_ = file->message_type(2);
  static const int cmsg_login_request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_login_request, code_),
  };
  cmsg_login_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_login_request_descriptor_,
      cmsg_login_request::default_instance_,
      cmsg_login_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_login_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_login_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_login_request));
  smsg_loginRequest_reply_descriptor_ = file->message_type(3);
  static const int smsg_loginRequest_reply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_loginRequest_reply, code_),
  };
  smsg_loginRequest_reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_loginRequest_reply_descriptor_,
      smsg_loginRequest_reply::default_instance_,
      smsg_loginRequest_reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_loginRequest_reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_loginRequest_reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_loginRequest_reply));
  cmsg_ChangePassword_descriptor_ = file->message_type(4);
  static const int cmsg_ChangePassword_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_ChangePassword, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_ChangePassword, oldpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_ChangePassword, newpassword_),
  };
  cmsg_ChangePassword_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cmsg_ChangePassword_descriptor_,
      cmsg_ChangePassword::default_instance_,
      cmsg_ChangePassword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_ChangePassword, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cmsg_ChangePassword, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cmsg_ChangePassword));
  smsg_Result_descriptor_ = file->message_type(5);
  static const int smsg_Result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_Result, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_Result, rescode_),
  };
  smsg_Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_Result_descriptor_,
      smsg_Result::default_instance_,
      smsg_Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_Result));
  smsg_Auth_Success_descriptor_ = file->message_type(6);
  static const int smsg_Auth_Success_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_Auth_Success, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_Auth_Success, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_Auth_Success, gatewayip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_Auth_Success, port_),
  };
  smsg_Auth_Success_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      smsg_Auth_Success_descriptor_,
      smsg_Auth_Success::default_instance_,
      smsg_Auth_Success_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_Auth_Success, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(smsg_Auth_Success, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(smsg_Auth_Success));
  smsg_code_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_CreateAccount_descriptor_, &cmsg_CreateAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_LoginAccount_descriptor_, &cmsg_LoginAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_login_request_descriptor_, &cmsg_login_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_loginRequest_reply_descriptor_, &smsg_loginRequest_reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cmsg_ChangePassword_descriptor_, &cmsg_ChangePassword::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_Result_descriptor_, &smsg_Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    smsg_Auth_Success_descriptor_, &smsg_Auth_Success::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_login_2eproto() {
  delete cmsg_CreateAccount::default_instance_;
  delete cmsg_CreateAccount_reflection_;
  delete cmsg_LoginAccount::default_instance_;
  delete cmsg_LoginAccount_reflection_;
  delete cmsg_login_request::default_instance_;
  delete cmsg_login_request_reflection_;
  delete smsg_loginRequest_reply::default_instance_;
  delete smsg_loginRequest_reply_reflection_;
  delete cmsg_ChangePassword::default_instance_;
  delete cmsg_ChangePassword_reflection_;
  delete smsg_Result::default_instance_;
  delete smsg_Result_reflection_;
  delete smsg_Auth_Success::default_instance_;
  delete smsg_Auth_Success_reflection_;
}

void protobuf_AddDesc_login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013login.proto\022\013LoginServer\"M\n\022cmsg_Creat"
    "eAccount\022\023\n\013Accountname\030\001 \002(\t\022\020\n\010passwor"
    "d\030\002 \001(\t\022\020\n\010username\030\003 \001(\t\"7\n\021cmsg_LoginA"
    "ccount\022\020\n\010username\030\001 \002(\t\022\020\n\010password\030\002 \001"
    "(\014\"\"\n\022cmsg_login_request\022\014\n\004Code\030\001 \002(\014\"\'"
    "\n\027smsg_loginRequest_reply\022\014\n\004code\030\001 \002(\014\""
    "T\n\023cmsg_ChangePassword\022\023\n\013Accountname\030\001 "
    "\002(\t\022\023\n\013oldpassword\030\002 \001(\014\022\023\n\013newpassword\030"
    "\003 \001(\t\"F\n\013smsg_Result\022\016\n\006Opcode\030\001 \002(\r\022\'\n\007"
    "rescode\030\002 \001(\0162\026.LoginServer.smsg_code\"Z\n"
    "\021smsg_Auth_Success\022\021\n\tsessionid\030\001 \002(\014\022\021\n"
    "\taccountID\030\002 \001(\r\022\021\n\tgatewayip\030\003 \001(\t\022\014\n\004p"
    "ort\030\004 \001(\r*\277\001\n\tsmsg_code\022\016\n\nOP_Success\020\000\022"
    "\026\n\022OP_error_NameExist\020\001\022\031\n\025OP_error_Name"
    "NotExist\020\002\022\031\n\025OP_error_PWNotCurrent\020\003\022\034\n"
    "\030OP_error_NoGateWaySelect\020\004\022\027\n\023OP_error_"
    "DBTimerOut\020\005\022\035\n\031OP_error_ACCOUNT_ISONLIN"
    "E\020\006", 683);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "login.proto", &protobuf_RegisterTypes);
  cmsg_CreateAccount::default_instance_ = new cmsg_CreateAccount();
  cmsg_LoginAccount::default_instance_ = new cmsg_LoginAccount();
  cmsg_login_request::default_instance_ = new cmsg_login_request();
  smsg_loginRequest_reply::default_instance_ = new smsg_loginRequest_reply();
  cmsg_ChangePassword::default_instance_ = new cmsg_ChangePassword();
  smsg_Result::default_instance_ = new smsg_Result();
  smsg_Auth_Success::default_instance_ = new smsg_Auth_Success();
  cmsg_CreateAccount::default_instance_->InitAsDefaultInstance();
  cmsg_LoginAccount::default_instance_->InitAsDefaultInstance();
  cmsg_login_request::default_instance_->InitAsDefaultInstance();
  smsg_loginRequest_reply::default_instance_->InitAsDefaultInstance();
  cmsg_ChangePassword::default_instance_->InitAsDefaultInstance();
  smsg_Result::default_instance_->InitAsDefaultInstance();
  smsg_Auth_Success::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_login_2eproto {
  StaticDescriptorInitializer_login_2eproto() {
    protobuf_AddDesc_login_2eproto();
  }
} static_descriptor_initializer_login_2eproto_;

const ::google::protobuf::EnumDescriptor* smsg_code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_code_descriptor_;
}
bool smsg_code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string cmsg_CreateAccount::_default_accountname_;
const ::std::string cmsg_CreateAccount::_default_password_;
const ::std::string cmsg_CreateAccount::_default_username_;
#ifndef _MSC_VER
const int cmsg_CreateAccount::kAccountnameFieldNumber;
const int cmsg_CreateAccount::kPasswordFieldNumber;
const int cmsg_CreateAccount::kUsernameFieldNumber;
#endif  // !_MSC_VER

cmsg_CreateAccount::cmsg_CreateAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cmsg_CreateAccount::InitAsDefaultInstance() {
}

cmsg_CreateAccount::cmsg_CreateAccount(const cmsg_CreateAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cmsg_CreateAccount::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&_default_accountname_);
  password_ = const_cast< ::std::string*>(&_default_password_);
  username_ = const_cast< ::std::string*>(&_default_username_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_CreateAccount::~cmsg_CreateAccount() {
  SharedDtor();
}

void cmsg_CreateAccount::SharedDtor() {
  if (accountname_ != &_default_accountname_) {
    delete accountname_;
  }
  if (password_ != &_default_password_) {
    delete password_;
  }
  if (username_ != &_default_username_) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void cmsg_CreateAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_CreateAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_CreateAccount_descriptor_;
}

const cmsg_CreateAccount& cmsg_CreateAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();  return *default_instance_;
}

cmsg_CreateAccount* cmsg_CreateAccount::default_instance_ = NULL;

cmsg_CreateAccount* cmsg_CreateAccount::New() const {
  return new cmsg_CreateAccount;
}

void cmsg_CreateAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (accountname_ != &_default_accountname_) {
        accountname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (password_ != &_default_password_) {
        password_->clear();
      }
    }
    if (_has_bit(2)) {
      if (username_ != &_default_username_) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_CreateAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Accountname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }
      
      // optional string username = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cmsg_CreateAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Accountname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }
  
  // optional string password = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // optional string username = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cmsg_CreateAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Accountname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }
  
  // optional string password = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // optional string username = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cmsg_CreateAccount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Accountname = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }
    
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_CreateAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_CreateAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_CreateAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_CreateAccount::MergeFrom(const cmsg_CreateAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountname(from.accountname());
    }
    if (from._has_bit(1)) {
      set_password(from.password());
    }
    if (from._has_bit(2)) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_CreateAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_CreateAccount::CopyFrom(const cmsg_CreateAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_CreateAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void cmsg_CreateAccount::Swap(cmsg_CreateAccount* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(password_, other->password_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_CreateAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_CreateAccount_descriptor_;
  metadata.reflection = cmsg_CreateAccount_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string cmsg_LoginAccount::_default_username_;
const ::std::string cmsg_LoginAccount::_default_password_;
#ifndef _MSC_VER
const int cmsg_LoginAccount::kUsernameFieldNumber;
const int cmsg_LoginAccount::kPasswordFieldNumber;
#endif  // !_MSC_VER

cmsg_LoginAccount::cmsg_LoginAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cmsg_LoginAccount::InitAsDefaultInstance() {
}

cmsg_LoginAccount::cmsg_LoginAccount(const cmsg_LoginAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cmsg_LoginAccount::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&_default_username_);
  password_ = const_cast< ::std::string*>(&_default_password_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_LoginAccount::~cmsg_LoginAccount() {
  SharedDtor();
}

void cmsg_LoginAccount::SharedDtor() {
  if (username_ != &_default_username_) {
    delete username_;
  }
  if (password_ != &_default_password_) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void cmsg_LoginAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_LoginAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_LoginAccount_descriptor_;
}

const cmsg_LoginAccount& cmsg_LoginAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();  return *default_instance_;
}

cmsg_LoginAccount* cmsg_LoginAccount::default_instance_ = NULL;

cmsg_LoginAccount* cmsg_LoginAccount::New() const {
  return new cmsg_LoginAccount;
}

void cmsg_LoginAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (username_ != &_default_username_) {
        username_->clear();
      }
    }
    if (_has_bit(1)) {
      if (password_ != &_default_password_) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_LoginAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // optional bytes password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cmsg_LoginAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // optional bytes password = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cmsg_LoginAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // optional bytes password = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cmsg_LoginAccount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional bytes password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_LoginAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_LoginAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_LoginAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_LoginAccount::MergeFrom(const cmsg_LoginAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_username(from.username());
    }
    if (from._has_bit(1)) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_LoginAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_LoginAccount::CopyFrom(const cmsg_LoginAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_LoginAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void cmsg_LoginAccount::Swap(cmsg_LoginAccount* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_LoginAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_LoginAccount_descriptor_;
  metadata.reflection = cmsg_LoginAccount_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string cmsg_login_request::_default_code_;
#ifndef _MSC_VER
const int cmsg_login_request::kCodeFieldNumber;
#endif  // !_MSC_VER

cmsg_login_request::cmsg_login_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cmsg_login_request::InitAsDefaultInstance() {
}

cmsg_login_request::cmsg_login_request(const cmsg_login_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cmsg_login_request::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&_default_code_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_login_request::~cmsg_login_request() {
  SharedDtor();
}

void cmsg_login_request::SharedDtor() {
  if (code_ != &_default_code_) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void cmsg_login_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_login_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_login_request_descriptor_;
}

const cmsg_login_request& cmsg_login_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();  return *default_instance_;
}

cmsg_login_request* cmsg_login_request::default_instance_ = NULL;

cmsg_login_request* cmsg_login_request::New() const {
  return new cmsg_login_request;
}

void cmsg_login_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (code_ != &_default_code_) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_login_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cmsg_login_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes Code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cmsg_login_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes Code = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cmsg_login_request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_login_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_login_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_login_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_login_request::MergeFrom(const cmsg_login_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_login_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_login_request::CopyFrom(const cmsg_login_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_login_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void cmsg_login_request::Swap(cmsg_login_request* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_login_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_login_request_descriptor_;
  metadata.reflection = cmsg_login_request_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string smsg_loginRequest_reply::_default_code_;
#ifndef _MSC_VER
const int smsg_loginRequest_reply::kCodeFieldNumber;
#endif  // !_MSC_VER

smsg_loginRequest_reply::smsg_loginRequest_reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void smsg_loginRequest_reply::InitAsDefaultInstance() {
}

smsg_loginRequest_reply::smsg_loginRequest_reply(const smsg_loginRequest_reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void smsg_loginRequest_reply::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&_default_code_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_loginRequest_reply::~smsg_loginRequest_reply() {
  SharedDtor();
}

void smsg_loginRequest_reply::SharedDtor() {
  if (code_ != &_default_code_) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void smsg_loginRequest_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_loginRequest_reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_loginRequest_reply_descriptor_;
}

const smsg_loginRequest_reply& smsg_loginRequest_reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();  return *default_instance_;
}

smsg_loginRequest_reply* smsg_loginRequest_reply::default_instance_ = NULL;

smsg_loginRequest_reply* smsg_loginRequest_reply::New() const {
  return new smsg_loginRequest_reply;
}

void smsg_loginRequest_reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (code_ != &_default_code_) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_loginRequest_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void smsg_loginRequest_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* smsg_loginRequest_reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes code = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int smsg_loginRequest_reply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_loginRequest_reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_loginRequest_reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_loginRequest_reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_loginRequest_reply::MergeFrom(const smsg_loginRequest_reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_loginRequest_reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_loginRequest_reply::CopyFrom(const smsg_loginRequest_reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_loginRequest_reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void smsg_loginRequest_reply::Swap(smsg_loginRequest_reply* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_loginRequest_reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_loginRequest_reply_descriptor_;
  metadata.reflection = smsg_loginRequest_reply_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string cmsg_ChangePassword::_default_accountname_;
const ::std::string cmsg_ChangePassword::_default_oldpassword_;
const ::std::string cmsg_ChangePassword::_default_newpassword_;
#ifndef _MSC_VER
const int cmsg_ChangePassword::kAccountnameFieldNumber;
const int cmsg_ChangePassword::kOldpasswordFieldNumber;
const int cmsg_ChangePassword::kNewpasswordFieldNumber;
#endif  // !_MSC_VER

cmsg_ChangePassword::cmsg_ChangePassword()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cmsg_ChangePassword::InitAsDefaultInstance() {
}

cmsg_ChangePassword::cmsg_ChangePassword(const cmsg_ChangePassword& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cmsg_ChangePassword::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&_default_accountname_);
  oldpassword_ = const_cast< ::std::string*>(&_default_oldpassword_);
  newpassword_ = const_cast< ::std::string*>(&_default_newpassword_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cmsg_ChangePassword::~cmsg_ChangePassword() {
  SharedDtor();
}

void cmsg_ChangePassword::SharedDtor() {
  if (accountname_ != &_default_accountname_) {
    delete accountname_;
  }
  if (oldpassword_ != &_default_oldpassword_) {
    delete oldpassword_;
  }
  if (newpassword_ != &_default_newpassword_) {
    delete newpassword_;
  }
  if (this != default_instance_) {
  }
}

void cmsg_ChangePassword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cmsg_ChangePassword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmsg_ChangePassword_descriptor_;
}

const cmsg_ChangePassword& cmsg_ChangePassword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();  return *default_instance_;
}

cmsg_ChangePassword* cmsg_ChangePassword::default_instance_ = NULL;

cmsg_ChangePassword* cmsg_ChangePassword::New() const {
  return new cmsg_ChangePassword;
}

void cmsg_ChangePassword::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (accountname_ != &_default_accountname_) {
        accountname_->clear();
      }
    }
    if (_has_bit(1)) {
      if (oldpassword_ != &_default_oldpassword_) {
        oldpassword_->clear();
      }
    }
    if (_has_bit(2)) {
      if (newpassword_ != &_default_newpassword_) {
        newpassword_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cmsg_ChangePassword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Accountname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oldpassword;
        break;
      }
      
      // optional bytes oldpassword = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldpassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_oldpassword()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newpassword;
        break;
      }
      
      // optional string newpassword = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newpassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newpassword().data(), this->newpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cmsg_ChangePassword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Accountname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }
  
  // optional bytes oldpassword = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->oldpassword(), output);
  }
  
  // optional string newpassword = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newpassword().data(), this->newpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->newpassword(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cmsg_ChangePassword::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Accountname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }
  
  // optional bytes oldpassword = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->oldpassword(), target);
  }
  
  // optional string newpassword = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newpassword().data(), this->newpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->newpassword(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cmsg_ChangePassword::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Accountname = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }
    
    // optional bytes oldpassword = 2;
    if (has_oldpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->oldpassword());
    }
    
    // optional string newpassword = 3;
    if (has_newpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newpassword());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cmsg_ChangePassword::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cmsg_ChangePassword* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cmsg_ChangePassword*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cmsg_ChangePassword::MergeFrom(const cmsg_ChangePassword& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_accountname(from.accountname());
    }
    if (from._has_bit(1)) {
      set_oldpassword(from.oldpassword());
    }
    if (from._has_bit(2)) {
      set_newpassword(from.newpassword());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cmsg_ChangePassword::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cmsg_ChangePassword::CopyFrom(const cmsg_ChangePassword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cmsg_ChangePassword::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void cmsg_ChangePassword::Swap(cmsg_ChangePassword* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(oldpassword_, other->oldpassword_);
    std::swap(newpassword_, other->newpassword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cmsg_ChangePassword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cmsg_ChangePassword_descriptor_;
  metadata.reflection = cmsg_ChangePassword_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int smsg_Result::kOpcodeFieldNumber;
const int smsg_Result::kRescodeFieldNumber;
#endif  // !_MSC_VER

smsg_Result::smsg_Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void smsg_Result::InitAsDefaultInstance() {
}

smsg_Result::smsg_Result(const smsg_Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void smsg_Result::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0u;
  rescode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_Result::~smsg_Result() {
  SharedDtor();
}

void smsg_Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void smsg_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_Result_descriptor_;
}

const smsg_Result& smsg_Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();  return *default_instance_;
}

smsg_Result* smsg_Result::default_instance_ = NULL;

smsg_Result* smsg_Result::New() const {
  return new smsg_Result;
}

void smsg_Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opcode_ = 0u;
    rescode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Opcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opcode_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rescode;
        break;
      }
      
      // optional .LoginServer.smsg_code rescode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rescode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (LoginServer::smsg_code_IsValid(value)) {
            set_rescode(static_cast< LoginServer::smsg_code >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void smsg_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Opcode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->opcode(), output);
  }
  
  // optional .LoginServer.smsg_code rescode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rescode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* smsg_Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Opcode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->opcode(), target);
  }
  
  // optional .LoginServer.smsg_code rescode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rescode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int smsg_Result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opcode());
    }
    
    // optional .LoginServer.smsg_code rescode = 2;
    if (has_rescode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rescode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_Result::MergeFrom(const smsg_Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_opcode(from.opcode());
    }
    if (from._has_bit(1)) {
      set_rescode(from.rescode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_Result::CopyFrom(const smsg_Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void smsg_Result::Swap(smsg_Result* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(rescode_, other->rescode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_Result_descriptor_;
  metadata.reflection = smsg_Result_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string smsg_Auth_Success::_default_sessionid_;
const ::std::string smsg_Auth_Success::_default_gatewayip_;
#ifndef _MSC_VER
const int smsg_Auth_Success::kSessionidFieldNumber;
const int smsg_Auth_Success::kAccountIDFieldNumber;
const int smsg_Auth_Success::kGatewayipFieldNumber;
const int smsg_Auth_Success::kPortFieldNumber;
#endif  // !_MSC_VER

smsg_Auth_Success::smsg_Auth_Success()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void smsg_Auth_Success::InitAsDefaultInstance() {
}

smsg_Auth_Success::smsg_Auth_Success(const smsg_Auth_Success& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void smsg_Auth_Success::SharedCtor() {
  _cached_size_ = 0;
  sessionid_ = const_cast< ::std::string*>(&_default_sessionid_);
  accountid_ = 0u;
  gatewayip_ = const_cast< ::std::string*>(&_default_gatewayip_);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

smsg_Auth_Success::~smsg_Auth_Success() {
  SharedDtor();
}

void smsg_Auth_Success::SharedDtor() {
  if (sessionid_ != &_default_sessionid_) {
    delete sessionid_;
  }
  if (gatewayip_ != &_default_gatewayip_) {
    delete gatewayip_;
  }
  if (this != default_instance_) {
  }
}

void smsg_Auth_Success::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* smsg_Auth_Success::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return smsg_Auth_Success_descriptor_;
}

const smsg_Auth_Success& smsg_Auth_Success::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();  return *default_instance_;
}

smsg_Auth_Success* smsg_Auth_Success::default_instance_ = NULL;

smsg_Auth_Success* smsg_Auth_Success::New() const {
  return new smsg_Auth_Success;
}

void smsg_Auth_Success::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (sessionid_ != &_default_sessionid_) {
        sessionid_->clear();
      }
    }
    accountid_ = 0u;
    if (_has_bit(2)) {
      if (gatewayip_ != &_default_gatewayip_) {
        gatewayip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool smsg_Auth_Success::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes sessionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sessionid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountID;
        break;
      }
      
      // optional uint32 accountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gatewayip;
        break;
      }
      
      // optional string gatewayip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gatewayip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gatewayip().data(), this->gatewayip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void smsg_Auth_Success::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes sessionid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sessionid(), output);
  }
  
  // optional uint32 accountID = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }
  
  // optional string gatewayip = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gatewayip().data(), this->gatewayip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->gatewayip(), output);
  }
  
  // optional uint32 port = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* smsg_Auth_Success::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes sessionid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sessionid(), target);
  }
  
  // optional uint32 accountID = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }
  
  // optional string gatewayip = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gatewayip().data(), this->gatewayip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gatewayip(), target);
  }
  
  // optional uint32 port = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int smsg_Auth_Success::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes sessionid = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sessionid());
    }
    
    // optional uint32 accountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }
    
    // optional string gatewayip = 3;
    if (has_gatewayip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gatewayip());
    }
    
    // optional uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void smsg_Auth_Success::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const smsg_Auth_Success* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const smsg_Auth_Success*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void smsg_Auth_Success::MergeFrom(const smsg_Auth_Success& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sessionid(from.sessionid());
    }
    if (from._has_bit(1)) {
      set_accountid(from.accountid());
    }
    if (from._has_bit(2)) {
      set_gatewayip(from.gatewayip());
    }
    if (from._has_bit(3)) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void smsg_Auth_Success::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void smsg_Auth_Success::CopyFrom(const smsg_Auth_Success& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool smsg_Auth_Success::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void smsg_Auth_Success::Swap(smsg_Auth_Success* other) {
  if (other != this) {
    std::swap(sessionid_, other->sessionid_);
    std::swap(accountid_, other->accountid_);
    std::swap(gatewayip_, other->gatewayip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata smsg_Auth_Success::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = smsg_Auth_Success_descriptor_;
  metadata.reflection = smsg_Auth_Success_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LoginServer

// @@protoc_insertion_point(global_scope)
