// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace LoginServer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class cmsg_CreateAccount;
class cmsg_LoginAccount;
class cmsg_login_request;
class smsg_loginRequest_reply;
class cmsg_ChangePassword;
class smsg_Result;
class smsg_Auth_Success;

enum smsg_code {
  OP_Success = 0,
  OP_error_NameExist = 1,
  OP_error_NameNotExist = 2,
  OP_error_PWNotCurrent = 3,
  OP_error_NoGateWaySelect = 4,
  OP_error_DBTimerOut = 5,
  OP_error_ACCOUNT_ISONLINE = 6
};
bool smsg_code_IsValid(int value);
const smsg_code smsg_code_MIN = OP_Success;
const smsg_code smsg_code_MAX = OP_error_ACCOUNT_ISONLINE;
const int smsg_code_ARRAYSIZE = smsg_code_MAX + 1;

const ::google::protobuf::EnumDescriptor* smsg_code_descriptor();
inline const ::std::string& smsg_code_Name(smsg_code value) {
  return ::google::protobuf::internal::NameOfEnum(
    smsg_code_descriptor(), value);
}
inline bool smsg_code_Parse(
    const ::std::string& name, smsg_code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<smsg_code>(
    smsg_code_descriptor(), name, value);
}
// ===================================================================

class cmsg_CreateAccount : public ::google::protobuf::Message {
 public:
  cmsg_CreateAccount();
  virtual ~cmsg_CreateAccount();
  
  cmsg_CreateAccount(const cmsg_CreateAccount& from);
  
  inline cmsg_CreateAccount& operator=(const cmsg_CreateAccount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const cmsg_CreateAccount& default_instance();
  
  void Swap(cmsg_CreateAccount* other);
  
  // implements Message ----------------------------------------------
  
  cmsg_CreateAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cmsg_CreateAccount& from);
  void MergeFrom(const cmsg_CreateAccount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string Accountname = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountnameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  
  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  
  // optional string username = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  
  // @@protoc_insertion_point(class_scope:LoginServer.cmsg_CreateAccount)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* accountname_;
  static const ::std::string _default_accountname_;
  ::std::string* password_;
  static const ::std::string _default_password_;
  ::std::string* username_;
  static const ::std::string _default_username_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static cmsg_CreateAccount* default_instance_;
};
// -------------------------------------------------------------------

class cmsg_LoginAccount : public ::google::protobuf::Message {
 public:
  cmsg_LoginAccount();
  virtual ~cmsg_LoginAccount();
  
  cmsg_LoginAccount(const cmsg_LoginAccount& from);
  
  inline cmsg_LoginAccount& operator=(const cmsg_LoginAccount& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const cmsg_LoginAccount& default_instance();
  
  void Swap(cmsg_LoginAccount* other);
  
  // implements Message ----------------------------------------------
  
  cmsg_LoginAccount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cmsg_LoginAccount& from);
  void MergeFrom(const cmsg_LoginAccount& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  
  // optional bytes password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  
  // @@protoc_insertion_point(class_scope:LoginServer.cmsg_LoginAccount)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* username_;
  static const ::std::string _default_username_;
  ::std::string* password_;
  static const ::std::string _default_password_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static cmsg_LoginAccount* default_instance_;
};
// -------------------------------------------------------------------

class cmsg_login_request : public ::google::protobuf::Message {
 public:
  cmsg_login_request();
  virtual ~cmsg_login_request();
  
  cmsg_login_request(const cmsg_login_request& from);
  
  inline cmsg_login_request& operator=(const cmsg_login_request& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const cmsg_login_request& default_instance();
  
  void Swap(cmsg_login_request* other);
  
  // implements Message ----------------------------------------------
  
  cmsg_login_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cmsg_login_request& from);
  void MergeFrom(const cmsg_login_request& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes Code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const void* value, size_t size);
  inline ::std::string* mutable_code();
  
  // @@protoc_insertion_point(class_scope:LoginServer.cmsg_login_request)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* code_;
  static const ::std::string _default_code_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static cmsg_login_request* default_instance_;
};
// -------------------------------------------------------------------

class smsg_loginRequest_reply : public ::google::protobuf::Message {
 public:
  smsg_loginRequest_reply();
  virtual ~smsg_loginRequest_reply();
  
  smsg_loginRequest_reply(const smsg_loginRequest_reply& from);
  
  inline smsg_loginRequest_reply& operator=(const smsg_loginRequest_reply& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_loginRequest_reply& default_instance();
  
  void Swap(smsg_loginRequest_reply* other);
  
  // implements Message ----------------------------------------------
  
  smsg_loginRequest_reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const smsg_loginRequest_reply& from);
  void MergeFrom(const smsg_loginRequest_reply& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const void* value, size_t size);
  inline ::std::string* mutable_code();
  
  // @@protoc_insertion_point(class_scope:LoginServer.smsg_loginRequest_reply)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* code_;
  static const ::std::string _default_code_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static smsg_loginRequest_reply* default_instance_;
};
// -------------------------------------------------------------------

class cmsg_ChangePassword : public ::google::protobuf::Message {
 public:
  cmsg_ChangePassword();
  virtual ~cmsg_ChangePassword();
  
  cmsg_ChangePassword(const cmsg_ChangePassword& from);
  
  inline cmsg_ChangePassword& operator=(const cmsg_ChangePassword& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const cmsg_ChangePassword& default_instance();
  
  void Swap(cmsg_ChangePassword* other);
  
  // implements Message ----------------------------------------------
  
  cmsg_ChangePassword* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cmsg_ChangePassword& from);
  void MergeFrom(const cmsg_ChangePassword& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string Accountname = 1;
  inline bool has_accountname() const;
  inline void clear_accountname();
  static const int kAccountnameFieldNumber = 1;
  inline const ::std::string& accountname() const;
  inline void set_accountname(const ::std::string& value);
  inline void set_accountname(const char* value);
  inline void set_accountname(const char* value, size_t size);
  inline ::std::string* mutable_accountname();
  
  // optional bytes oldpassword = 2;
  inline bool has_oldpassword() const;
  inline void clear_oldpassword();
  static const int kOldpasswordFieldNumber = 2;
  inline const ::std::string& oldpassword() const;
  inline void set_oldpassword(const ::std::string& value);
  inline void set_oldpassword(const char* value);
  inline void set_oldpassword(const void* value, size_t size);
  inline ::std::string* mutable_oldpassword();
  
  // optional string newpassword = 3;
  inline bool has_newpassword() const;
  inline void clear_newpassword();
  static const int kNewpasswordFieldNumber = 3;
  inline const ::std::string& newpassword() const;
  inline void set_newpassword(const ::std::string& value);
  inline void set_newpassword(const char* value);
  inline void set_newpassword(const char* value, size_t size);
  inline ::std::string* mutable_newpassword();
  
  // @@protoc_insertion_point(class_scope:LoginServer.cmsg_ChangePassword)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* accountname_;
  static const ::std::string _default_accountname_;
  ::std::string* oldpassword_;
  static const ::std::string _default_oldpassword_;
  ::std::string* newpassword_;
  static const ::std::string _default_newpassword_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static cmsg_ChangePassword* default_instance_;
};
// -------------------------------------------------------------------

class smsg_Result : public ::google::protobuf::Message {
 public:
  smsg_Result();
  virtual ~smsg_Result();
  
  smsg_Result(const smsg_Result& from);
  
  inline smsg_Result& operator=(const smsg_Result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_Result& default_instance();
  
  void Swap(smsg_Result* other);
  
  // implements Message ----------------------------------------------
  
  smsg_Result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const smsg_Result& from);
  void MergeFrom(const smsg_Result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 Opcode = 1;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 opcode() const;
  inline void set_opcode(::google::protobuf::uint32 value);
  
  // optional .LoginServer.smsg_code rescode = 2;
  inline bool has_rescode() const;
  inline void clear_rescode();
  static const int kRescodeFieldNumber = 2;
  inline LoginServer::smsg_code rescode() const;
  inline void set_rescode(LoginServer::smsg_code value);
  
  // @@protoc_insertion_point(class_scope:LoginServer.smsg_Result)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 opcode_;
  int rescode_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static smsg_Result* default_instance_;
};
// -------------------------------------------------------------------

class smsg_Auth_Success : public ::google::protobuf::Message {
 public:
  smsg_Auth_Success();
  virtual ~smsg_Auth_Success();
  
  smsg_Auth_Success(const smsg_Auth_Success& from);
  
  inline smsg_Auth_Success& operator=(const smsg_Auth_Success& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const smsg_Auth_Success& default_instance();
  
  void Swap(smsg_Auth_Success* other);
  
  // implements Message ----------------------------------------------
  
  smsg_Auth_Success* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const smsg_Auth_Success& from);
  void MergeFrom(const smsg_Auth_Success& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes sessionid = 1;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 1;
  inline const ::std::string& sessionid() const;
  inline void set_sessionid(const ::std::string& value);
  inline void set_sessionid(const char* value);
  inline void set_sessionid(const void* value, size_t size);
  inline ::std::string* mutable_sessionid();
  
  // optional uint32 accountID = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIDFieldNumber = 2;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);
  
  // optional string gatewayip = 3;
  inline bool has_gatewayip() const;
  inline void clear_gatewayip();
  static const int kGatewayipFieldNumber = 3;
  inline const ::std::string& gatewayip() const;
  inline void set_gatewayip(const ::std::string& value);
  inline void set_gatewayip(const char* value);
  inline void set_gatewayip(const char* value, size_t size);
  inline ::std::string* mutable_gatewayip();
  
  // optional uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:LoginServer.smsg_Auth_Success)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* sessionid_;
  static const ::std::string _default_sessionid_;
  ::google::protobuf::uint32 accountid_;
  ::std::string* gatewayip_;
  static const ::std::string _default_gatewayip_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static smsg_Auth_Success* default_instance_;
};
// ===================================================================


// ===================================================================

// cmsg_CreateAccount

// required string Accountname = 1;
inline bool cmsg_CreateAccount::has_accountname() const {
  return _has_bit(0);
}
inline void cmsg_CreateAccount::clear_accountname() {
  if (accountname_ != &_default_accountname_) {
    accountname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& cmsg_CreateAccount::accountname() const {
  return *accountname_;
}
inline void cmsg_CreateAccount::set_accountname(const ::std::string& value) {
  _set_bit(0);
  if (accountname_ == &_default_accountname_) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void cmsg_CreateAccount::set_accountname(const char* value) {
  _set_bit(0);
  if (accountname_ == &_default_accountname_) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void cmsg_CreateAccount::set_accountname(const char* value, size_t size) {
  _set_bit(0);
  if (accountname_ == &_default_accountname_) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cmsg_CreateAccount::mutable_accountname() {
  _set_bit(0);
  if (accountname_ == &_default_accountname_) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}

// optional string password = 2;
inline bool cmsg_CreateAccount::has_password() const {
  return _has_bit(1);
}
inline void cmsg_CreateAccount::clear_password() {
  if (password_ != &_default_password_) {
    password_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& cmsg_CreateAccount::password() const {
  return *password_;
}
inline void cmsg_CreateAccount::set_password(const ::std::string& value) {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void cmsg_CreateAccount::set_password(const char* value) {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void cmsg_CreateAccount::set_password(const char* value, size_t size) {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cmsg_CreateAccount::mutable_password() {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  return password_;
}

// optional string username = 3;
inline bool cmsg_CreateAccount::has_username() const {
  return _has_bit(2);
}
inline void cmsg_CreateAccount::clear_username() {
  if (username_ != &_default_username_) {
    username_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& cmsg_CreateAccount::username() const {
  return *username_;
}
inline void cmsg_CreateAccount::set_username(const ::std::string& value) {
  _set_bit(2);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void cmsg_CreateAccount::set_username(const char* value) {
  _set_bit(2);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void cmsg_CreateAccount::set_username(const char* value, size_t size) {
  _set_bit(2);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cmsg_CreateAccount::mutable_username() {
  _set_bit(2);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  return username_;
}

// -------------------------------------------------------------------

// cmsg_LoginAccount

// required string username = 1;
inline bool cmsg_LoginAccount::has_username() const {
  return _has_bit(0);
}
inline void cmsg_LoginAccount::clear_username() {
  if (username_ != &_default_username_) {
    username_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& cmsg_LoginAccount::username() const {
  return *username_;
}
inline void cmsg_LoginAccount::set_username(const ::std::string& value) {
  _set_bit(0);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void cmsg_LoginAccount::set_username(const char* value) {
  _set_bit(0);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void cmsg_LoginAccount::set_username(const char* value, size_t size) {
  _set_bit(0);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cmsg_LoginAccount::mutable_username() {
  _set_bit(0);
  if (username_ == &_default_username_) {
    username_ = new ::std::string;
  }
  return username_;
}

// optional bytes password = 2;
inline bool cmsg_LoginAccount::has_password() const {
  return _has_bit(1);
}
inline void cmsg_LoginAccount::clear_password() {
  if (password_ != &_default_password_) {
    password_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& cmsg_LoginAccount::password() const {
  return *password_;
}
inline void cmsg_LoginAccount::set_password(const ::std::string& value) {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void cmsg_LoginAccount::set_password(const char* value) {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void cmsg_LoginAccount::set_password(const void* value, size_t size) {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cmsg_LoginAccount::mutable_password() {
  _set_bit(1);
  if (password_ == &_default_password_) {
    password_ = new ::std::string;
  }
  return password_;
}

// -------------------------------------------------------------------

// cmsg_login_request

// required bytes Code = 1;
inline bool cmsg_login_request::has_code() const {
  return _has_bit(0);
}
inline void cmsg_login_request::clear_code() {
  if (code_ != &_default_code_) {
    code_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& cmsg_login_request::code() const {
  return *code_;
}
inline void cmsg_login_request::set_code(const ::std::string& value) {
  _set_bit(0);
  if (code_ == &_default_code_) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void cmsg_login_request::set_code(const char* value) {
  _set_bit(0);
  if (code_ == &_default_code_) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void cmsg_login_request::set_code(const void* value, size_t size) {
  _set_bit(0);
  if (code_ == &_default_code_) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cmsg_login_request::mutable_code() {
  _set_bit(0);
  if (code_ == &_default_code_) {
    code_ = new ::std::string;
  }
  return code_;
}

// -------------------------------------------------------------------

// smsg_loginRequest_reply

// required bytes code = 1;
inline bool smsg_loginRequest_reply::has_code() const {
  return _has_bit(0);
}
inline void smsg_loginRequest_reply::clear_code() {
  if (code_ != &_default_code_) {
    code_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& smsg_loginRequest_reply::code() const {
  return *code_;
}
inline void smsg_loginRequest_reply::set_code(const ::std::string& value) {
  _set_bit(0);
  if (code_ == &_default_code_) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void smsg_loginRequest_reply::set_code(const char* value) {
  _set_bit(0);
  if (code_ == &_default_code_) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void smsg_loginRequest_reply::set_code(const void* value, size_t size) {
  _set_bit(0);
  if (code_ == &_default_code_) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* smsg_loginRequest_reply::mutable_code() {
  _set_bit(0);
  if (code_ == &_default_code_) {
    code_ = new ::std::string;
  }
  return code_;
}

// -------------------------------------------------------------------

// cmsg_ChangePassword

// required string Accountname = 1;
inline bool cmsg_ChangePassword::has_accountname() const {
  return _has_bit(0);
}
inline void cmsg_ChangePassword::clear_accountname() {
  if (accountname_ != &_default_accountname_) {
    accountname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& cmsg_ChangePassword::accountname() const {
  return *accountname_;
}
inline void cmsg_ChangePassword::set_accountname(const ::std::string& value) {
  _set_bit(0);
  if (accountname_ == &_default_accountname_) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void cmsg_ChangePassword::set_accountname(const char* value) {
  _set_bit(0);
  if (accountname_ == &_default_accountname_) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void cmsg_ChangePassword::set_accountname(const char* value, size_t size) {
  _set_bit(0);
  if (accountname_ == &_default_accountname_) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cmsg_ChangePassword::mutable_accountname() {
  _set_bit(0);
  if (accountname_ == &_default_accountname_) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}

// optional bytes oldpassword = 2;
inline bool cmsg_ChangePassword::has_oldpassword() const {
  return _has_bit(1);
}
inline void cmsg_ChangePassword::clear_oldpassword() {
  if (oldpassword_ != &_default_oldpassword_) {
    oldpassword_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& cmsg_ChangePassword::oldpassword() const {
  return *oldpassword_;
}
inline void cmsg_ChangePassword::set_oldpassword(const ::std::string& value) {
  _set_bit(1);
  if (oldpassword_ == &_default_oldpassword_) {
    oldpassword_ = new ::std::string;
  }
  oldpassword_->assign(value);
}
inline void cmsg_ChangePassword::set_oldpassword(const char* value) {
  _set_bit(1);
  if (oldpassword_ == &_default_oldpassword_) {
    oldpassword_ = new ::std::string;
  }
  oldpassword_->assign(value);
}
inline void cmsg_ChangePassword::set_oldpassword(const void* value, size_t size) {
  _set_bit(1);
  if (oldpassword_ == &_default_oldpassword_) {
    oldpassword_ = new ::std::string;
  }
  oldpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cmsg_ChangePassword::mutable_oldpassword() {
  _set_bit(1);
  if (oldpassword_ == &_default_oldpassword_) {
    oldpassword_ = new ::std::string;
  }
  return oldpassword_;
}

// optional string newpassword = 3;
inline bool cmsg_ChangePassword::has_newpassword() const {
  return _has_bit(2);
}
inline void cmsg_ChangePassword::clear_newpassword() {
  if (newpassword_ != &_default_newpassword_) {
    newpassword_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& cmsg_ChangePassword::newpassword() const {
  return *newpassword_;
}
inline void cmsg_ChangePassword::set_newpassword(const ::std::string& value) {
  _set_bit(2);
  if (newpassword_ == &_default_newpassword_) {
    newpassword_ = new ::std::string;
  }
  newpassword_->assign(value);
}
inline void cmsg_ChangePassword::set_newpassword(const char* value) {
  _set_bit(2);
  if (newpassword_ == &_default_newpassword_) {
    newpassword_ = new ::std::string;
  }
  newpassword_->assign(value);
}
inline void cmsg_ChangePassword::set_newpassword(const char* value, size_t size) {
  _set_bit(2);
  if (newpassword_ == &_default_newpassword_) {
    newpassword_ = new ::std::string;
  }
  newpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cmsg_ChangePassword::mutable_newpassword() {
  _set_bit(2);
  if (newpassword_ == &_default_newpassword_) {
    newpassword_ = new ::std::string;
  }
  return newpassword_;
}

// -------------------------------------------------------------------

// smsg_Result

// required uint32 Opcode = 1;
inline bool smsg_Result::has_opcode() const {
  return _has_bit(0);
}
inline void smsg_Result::clear_opcode() {
  opcode_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 smsg_Result::opcode() const {
  return opcode_;
}
inline void smsg_Result::set_opcode(::google::protobuf::uint32 value) {
  _set_bit(0);
  opcode_ = value;
}

// optional .LoginServer.smsg_code rescode = 2;
inline bool smsg_Result::has_rescode() const {
  return _has_bit(1);
}
inline void smsg_Result::clear_rescode() {
  rescode_ = 0;
  _clear_bit(1);
}
inline LoginServer::smsg_code smsg_Result::rescode() const {
  return static_cast< LoginServer::smsg_code >(rescode_);
}
inline void smsg_Result::set_rescode(LoginServer::smsg_code value) {
  GOOGLE_DCHECK(LoginServer::smsg_code_IsValid(value));
  _set_bit(1);
  rescode_ = value;
}

// -------------------------------------------------------------------

// smsg_Auth_Success

// required bytes sessionid = 1;
inline bool smsg_Auth_Success::has_sessionid() const {
  return _has_bit(0);
}
inline void smsg_Auth_Success::clear_sessionid() {
  if (sessionid_ != &_default_sessionid_) {
    sessionid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& smsg_Auth_Success::sessionid() const {
  return *sessionid_;
}
inline void smsg_Auth_Success::set_sessionid(const ::std::string& value) {
  _set_bit(0);
  if (sessionid_ == &_default_sessionid_) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void smsg_Auth_Success::set_sessionid(const char* value) {
  _set_bit(0);
  if (sessionid_ == &_default_sessionid_) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void smsg_Auth_Success::set_sessionid(const void* value, size_t size) {
  _set_bit(0);
  if (sessionid_ == &_default_sessionid_) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* smsg_Auth_Success::mutable_sessionid() {
  _set_bit(0);
  if (sessionid_ == &_default_sessionid_) {
    sessionid_ = new ::std::string;
  }
  return sessionid_;
}

// optional uint32 accountID = 2;
inline bool smsg_Auth_Success::has_accountid() const {
  return _has_bit(1);
}
inline void smsg_Auth_Success::clear_accountid() {
  accountid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 smsg_Auth_Success::accountid() const {
  return accountid_;
}
inline void smsg_Auth_Success::set_accountid(::google::protobuf::uint32 value) {
  _set_bit(1);
  accountid_ = value;
}

// optional string gatewayip = 3;
inline bool smsg_Auth_Success::has_gatewayip() const {
  return _has_bit(2);
}
inline void smsg_Auth_Success::clear_gatewayip() {
  if (gatewayip_ != &_default_gatewayip_) {
    gatewayip_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& smsg_Auth_Success::gatewayip() const {
  return *gatewayip_;
}
inline void smsg_Auth_Success::set_gatewayip(const ::std::string& value) {
  _set_bit(2);
  if (gatewayip_ == &_default_gatewayip_) {
    gatewayip_ = new ::std::string;
  }
  gatewayip_->assign(value);
}
inline void smsg_Auth_Success::set_gatewayip(const char* value) {
  _set_bit(2);
  if (gatewayip_ == &_default_gatewayip_) {
    gatewayip_ = new ::std::string;
  }
  gatewayip_->assign(value);
}
inline void smsg_Auth_Success::set_gatewayip(const char* value, size_t size) {
  _set_bit(2);
  if (gatewayip_ == &_default_gatewayip_) {
    gatewayip_ = new ::std::string;
  }
  gatewayip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* smsg_Auth_Success::mutable_gatewayip() {
  _set_bit(2);
  if (gatewayip_ == &_default_gatewayip_) {
    gatewayip_ = new ::std::string;
  }
  return gatewayip_;
}

// optional uint32 port = 4;
inline bool smsg_Auth_Success::has_port() const {
  return _has_bit(3);
}
inline void smsg_Auth_Success::clear_port() {
  port_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 smsg_Auth_Success::port() const {
  return port_;
}
inline void smsg_Auth_Success::set_port(::google::protobuf::uint32 value) {
  _set_bit(3);
  port_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LoginServer

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< LoginServer::smsg_code>() {
  return LoginServer::smsg_code_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
